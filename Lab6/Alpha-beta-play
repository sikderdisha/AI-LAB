class Game:
    def __init__(self, initial_state):
        self.state = initial_state

    def get_children(self, state):
        """
        Generate all possible next states from the current state.
        """
        children = []
        for i in range(len(state)):
            if state[i] == " ":
                new_state = state[:]
                new_state[i] = "X" if state.count("X") <= state.count("O") else "O"
                children.append(new_state)
        return children

    def is_terminal(self, state):
        """
        Check if the current state is a terminal state (game over).
        """
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]             # Diagonals
        ]
        for combo in winning_combinations:
            if state[combo[0]] == state[combo[1]] == state[combo[2]] and state[combo[0]] != " ":
                return True
        return " " not in state  # Game over if no empty spaces

    def evaluate(self, state):
        """
        Evaluate the utility of a terminal state.
        """
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]             # Diagonals
        ]
        for combo in winning_combinations:
            if state[combo[0]] == state[combo[1]] == state[combo[2]]:
                if state[combo[0]] == "X":
                    return 10
                elif state[combo[0]] == "O":
                    return -10
        return 0  # Draw or non-terminal state

    def alpha_beta_minimax(self, state, depth, alpha, beta, maximizing_player):
        if depth == 0 or self.is_terminal(state):
            return self.evaluate(state)

        if maximizing_player:
            max_eval = float('-inf')
            for child in self.get_children(state):
                eval = self.alpha_beta_minimax(child, depth - 1, alpha, beta, False)
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = float('inf')
            for child in self.get_children(state):
                eval = self.alpha_beta_minimax(child, depth - 1, alpha, beta, True)
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval


# Example Usage
if __name__ == "__main__":
    initial_state = ["X", "O", " ",
                     " ", "X", " ",
                     "O", " ", " "]
    game = Game(initial_state)
    depth = 3
    alpha = float('-inf')
    beta = float('inf')
    maximizing_player = True

    best_score = game.alpha_beta_minimax(initial_state, depth, alpha, beta, maximizing_player)
    print(f"Best score: {best_score}")
